import React from 'react'
import { Link, Outlet, Route, Routes } from 'react-router-dom'
import PM from './PM'
import Spares from './Spares'
import Utilities from './Utilities'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { api } from '../shared/api'
import { useOutbox } from '../shared/outbox'
import { initPush } from '../shared/push'
//import { supabase } from '../shared/supabase'
import { useSession, useRole, signInWithEmail, signOut } from '../shared/auth'

function useProfile() {
  // Supabase not connected, so skip profile query
  return { data: null, error: null }
}

function Layout({ children }) {
  const session = useSession()
  const role = useRole()
  const [email, setEmail] = React.useState('')
  return (
    <div className="min-h-full bg-slate-50">
      <header className="bg-sky-600 text-white">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <h1 className="font-semibold">MIS</h1>
          <nav className="flex gap-4 text-sm">
            <Link to="/">Dashboard</Link>
            <Link to="/assets">Assets</Link>
            <Link to="/pm">PM</Link>
            <Link to="/breakdowns">Breakdowns</Link>
            <Link to="/spares">Spares</Link>
            <Link to="/utilities">Utilities</Link>
          </nav>
          <div className="flex items-center gap-3 text-sm">
            {role && <span className="opacity-80">Role: {role}</span>}
            {session ? (
              <button className="px-2 py-1 rounded bg-white/10" onClick={signOut}>Sign out</button>
            ) : (
              <div className="flex items-center gap-2">
                <input className="px-2 py-1 rounded text-slate-900" placeholder="email" value={email} onChange={(e) => setEmail(e.target.value)} />
                <button className="px-2 py-1 rounded bg-white/10" onClick={() => signInWithEmail(email)}>Sign in</button>
              </div>
            )}
          </div>
        </div>
      </header>
      <main className="max-w-6xl mx-auto p-4">{children}</main>
    </div>
  )
}

function Dashboard() {
  return (
    <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
      <Card title="PM Compliance">--%</Card>
      <Card title="MTTR">--</Card>
      <Card title="MTBF">--</Card>
      <Card title="Downtime">--</Card>
      <Card title="Spare Cost">--</Card>
      <Card title="Open Breakdowns">--</Card>
    </div>
  )
}

function Card({ title, children }) {
  return (
    <div className="rounded-lg border bg-white p-4 shadow-sm">
      <div className="text-sm text-slate-500">{title}</div>
      <div className="mt-2 text-2xl font-semibold">{children}</div>
    </div>
  )
}

function Assets() {
  const role = useRole()
  const qc = useQueryClient()
  // Supabase not connected, so skip assets query and mutations
  const { data } = { data: [] }
  const createMutation = { mutate: () => {} }
  const updateMutation = { mutate: () => {} }
  const deleteMutation = { mutate: () => {} }
  const [newForm, setNewForm] = React.useState({ asset_code: '', asset_name: '', location: '' })
  const [newErrors, setNewErrors] = React.useState({})
  const [editing, setEditing] = React.useState(null)
  const [editForm, setEditForm] = React.useState({ asset_code: '', asset_name: '', location: '' })
  const [editErrors, setEditErrors] = React.useState({})

  function validateAsset(form) {
    const e = {}
    if (!form.asset_code?.trim()) e.asset_code = 'Required'
    if (!form.asset_name?.trim()) e.asset_name = 'Required'
    return e
  }

  function startEdit(row) {
    setEditing(row.id)
    setEditForm({ asset_code: row.asset_code || '', asset_name: row.asset_name || '', location: row.location || '' })
    setEditErrors({})
  }

  function saveEdit() {
    const e = validateAsset(editForm)
    setEditErrors(e)
    if (Object.keys(e).length) return
    updateMutation.mutate({ id: editing, ...editForm })
  }

  function createAsset() {
    const e = validateAsset(newForm)
    setNewErrors(e)
    if (Object.keys(e).length) return
    createMutation.mutate(newForm, { onSuccess: () => setNewForm({ asset_code: '', asset_name: '', location: '' }) })
  }
  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h2 className="text-lg font-semibold">Assets</h2>
        {role === 'admin' && (
          <div className="flex items-center gap-2">
            <input className="border rounded p-1 text-sm" placeholder="Code" value={newForm.asset_code} onChange={(e) => setNewForm({ ...newForm, asset_code: e.target.value })} />
            <input className="border rounded p-1 text-sm" placeholder="Name" value={newForm.asset_name} onChange={(e) => setNewForm({ ...newForm, asset_name: e.target.value })} />
            <input className="border rounded p-1 text-sm" placeholder="Location" value={newForm.location} onChange={(e) => setNewForm({ ...newForm, location: e.target.value })} />
            <button className="px-3 py-1.5 rounded bg-sky-600 text-white text-sm" onClick={createAsset}>Add</button>
          </div>
        )}
      </div>
      {role === 'admin' && (Object.keys(newErrors).length > 0) && (
        <div className="text-red-600 text-sm mb-2">{Object.values(newErrors).join(', ')}</div>
      )}
      <div className="overflow-auto rounded border">
        <table className="min-w-full text-sm">
          <thead className="bg-slate-100">
            <tr>
              <th className="text-left p-2">Code</th>
              <th className="text-left p-2">Name</th>
              <th className="text-left p-2">Location</th>
              <th className="text-left p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {(data || []).map((row) => (
              <tr key={row.id} className="border-t">
                <td className="p-2">{editing === row.id ? (<input className="border rounded p-1" value={editForm.asset_code} onChange={(e) => setEditForm({ ...editForm, asset_code: e.target.value })} />) : row.asset_code}</td>
                <td className="p-2">{editing === row.id ? (<input className="border rounded p-1" value={editForm.asset_name} onChange={(e) => setEditForm({ ...editForm, asset_name: e.target.value })} />) : row.asset_name}</td>
                <td className="p-2">{editing === row.id ? (<input className="border rounded p-1" value={editForm.location} onChange={(e) => setEditForm({ ...editForm, location: e.target.value })} />) : row.location}</td>
                <td className="p-2">
                  {role === 'admin' ? (
                    editing === row.id ? (
                      <div className="flex gap-2">
                        <button className="text-sky-600" onClick={saveEdit}>Save</button>
                        <button className="text-slate-500" onClick={() => setEditing(null)}>Cancel</button>
                      </div>
                    ) : (
                      <div className="flex gap-2">
                        <button className="text-sky-600" onClick={() => startEdit(row)}>Edit</button>
                        <button className="text-red-600" onClick={() => deleteMutation.mutate(row.id)}>Delete</button>
                      </div>
                    )
                  ) : (
                    <button className="text-sky-600">View</button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {editing && (Object.keys(editErrors).length > 0) && (
        <div className="text-red-600 text-sm mt-2">{Object.values(editErrors).join(', ')}</div>
      )}
    </div>
  )
}

function Breakdowns() {
  const role = useRole()
  const { queue } = useOutbox()
  const [form, setForm] = React.useState({ asset_id: '', description: '' })
  const qc = useQueryClient()
  // Supabase not connected, so skip breakdowns query and mutations
  const { data } = { data: [] }
  const updateStatus = { mutate: () => {} }
  const deleteBk = { mutate: () => {} }

  async function submit() {
  // Supabase not connected, so skip submit
  return
  }

  return (
    <div className="space-y-3">
      <h2 className="text-lg font-semibold">Log Breakdown</h2>
      <div className="grid gap-3 max-w-lg">
        <input className="border rounded p-2" placeholder="Asset ID" value={form.asset_id} onChange={(e) => setForm({ ...form, asset_id: e.target.value })} />
        <textarea className="border rounded p-2" placeholder="Description" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} />
        {role && (
          <button className="px-3 py-2 rounded bg-sky-600 text-white" onClick={submit}>Submit</button>
        )}
      </div>
      <div className="mt-6">
        <h3 className="font-semibold mb-2">Recent Breakdowns</h3>
        <div className="overflow-auto rounded border">
          <table className="min-w-full text-sm">
            <thead className="bg-slate-100">
              <tr>
                <th className="text-left p-2">ID</th>
                <th className="text-left p-2">Asset</th>
                <th className="text-left p-2">Description</th>
                <th className="text-left p-2">Status</th>
                <th className="text-left p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {(data || []).map((row) => (
                <tr key={row.id} className="border-t">
                  <td className="p-2">{row.id}</td>
                  <td className="p-2">{row.asset_id || '-'}</td>
                  <td className="p-2">{row.description}</td>
                  <td className="p-2">{row.status}</td>
                  <td className="p-2">
                    {['engineer','admin'].includes(role || '') && (
                      <div className="flex gap-2">
                        {['ACK','IN_PROGRESS','RESOLVED','CLOSED'].map((s) => (
                          <button key={s} className="text-sky-600" onClick={() => updateStatus.mutate({ id: row.id, status: s })}>{s}</button>
                        ))}
                      </div>
                    )}
                    {role === 'admin' && (
                      <button className="text-red-600 ml-2" onClick={() => deleteBk.mutate(row.id)}>Delete</button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}

export default function App() {
  React.useEffect(() => { initPush() }, [])
  return (
    <Layout>
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/assets" element={<Assets />} />
        <Route path="/breakdowns" element={<Breakdowns />} />
        <Route path="/pm" element={<PM />} />
        <Route path="/scan" element={<div>Scan QR (stub)</div>} />
        <Route path="/spares" element={<Spares />} />
        <Route path="/utilities" element={<Utilities />} />
      </Routes>
      <Outlet />
    </Layout>
  )
}
